/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Chat's TierList
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  AddItem409,
  AddItemBody,
  AddTier409,
  AddTierBody,
  SetTierListBody,
  UpdateItem409,
  UpdateItemBody,
  UpdateTier409,
  UpdateTierBody,
  UpdateTierList404,
  UpdateTierListBody,
} from '../../models';

/**
 * @summary Overwrite entire tier list
 */
export const setTierList = (
  setTierListBody: SetTierListBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.put(`/tierlist`, setTierListBody, options);
};

export const getSetTierListMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setTierList>>,
    TError,
    { data: SetTierListBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setTierList>>,
  TError,
  { data: SetTierListBody },
  TContext
> => {
  const mutationKey = ['setTierList'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setTierList>>,
    { data: SetTierListBody }
  > = (props) => {
    const { data } = props ?? {};

    return setTierList(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetTierListMutationResult = NonNullable<
  Awaited<ReturnType<typeof setTierList>>
>;
export type SetTierListMutationBody = SetTierListBody;
export type SetTierListMutationError = AxiosError<unknown>;

/**
 * @summary Overwrite entire tier list
 */
export const useSetTierList = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setTierList>>,
      TError,
      { data: SetTierListBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof setTierList>>,
  TError,
  { data: SetTierListBody },
  TContext
> => {
  const mutationOptions = getSetTierListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update settings on the tier list
 */
export const updateTierList = (
  updateTierListBody: UpdateTierListBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(`/tierlist`, updateTierListBody, options);
};

export const getUpdateTierListMutationOptions = <
  TError = AxiosError<UpdateTierList404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTierList>>,
    TError,
    { data: UpdateTierListBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTierList>>,
  TError,
  { data: UpdateTierListBody },
  TContext
> => {
  const mutationKey = ['updateTierList'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTierList>>,
    { data: UpdateTierListBody }
  > = (props) => {
    const { data } = props ?? {};

    return updateTierList(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTierListMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTierList>>
>;
export type UpdateTierListMutationBody = UpdateTierListBody;
export type UpdateTierListMutationError = AxiosError<UpdateTierList404>;

/**
 * @summary Update settings on the tier list
 */
export const useUpdateTierList = <
  TError = AxiosError<UpdateTierList404>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTierList>>,
      TError,
      { data: UpdateTierListBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateTierList>>,
  TError,
  { data: UpdateTierListBody },
  TContext
> => {
  const mutationOptions = getUpdateTierListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Add a new tier
 */
export const addTier = (
  addTierBody: AddTierBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.post(`/tierlist/tier`, addTierBody, options);
};

export const getAddTierMutationOptions = <
  TError = AxiosError<AddTier409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addTier>>,
    TError,
    { data: AddTierBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addTier>>,
  TError,
  { data: AddTierBody },
  TContext
> => {
  const mutationKey = ['addTier'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addTier>>,
    { data: AddTierBody }
  > = (props) => {
    const { data } = props ?? {};

    return addTier(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddTierMutationResult = NonNullable<
  Awaited<ReturnType<typeof addTier>>
>;
export type AddTierMutationBody = AddTierBody;
export type AddTierMutationError = AxiosError<AddTier409>;

/**
 * @summary Add a new tier
 */
export const useAddTier = <TError = AxiosError<AddTier409>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addTier>>,
      TError,
      { data: AddTierBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof addTier>>,
  TError,
  { data: AddTierBody },
  TContext
> => {
  const mutationOptions = getAddTierMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update an existing tier
 */
export const updateTier = (
  name: string,
  updateTierBody: UpdateTierBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(`/tierlist/tier/${name}`, updateTierBody, options);
};

export const getUpdateTierMutationOptions = <
  TError = AxiosError<UpdateTier409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTier>>,
    TError,
    { name: string; data: UpdateTierBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTier>>,
  TError,
  { name: string; data: UpdateTierBody },
  TContext
> => {
  const mutationKey = ['updateTier'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTier>>,
    { name: string; data: UpdateTierBody }
  > = (props) => {
    const { name, data } = props ?? {};

    return updateTier(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTierMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTier>>
>;
export type UpdateTierMutationBody = UpdateTierBody;
export type UpdateTierMutationError = AxiosError<UpdateTier409>;

/**
 * @summary Update an existing tier
 */
export const useUpdateTier = <
  TError = AxiosError<UpdateTier409>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTier>>,
      TError,
      { name: string; data: UpdateTierBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateTier>>,
  TError,
  { name: string; data: UpdateTierBody },
  TContext
> => {
  const mutationOptions = getUpdateTierMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Adds a new item
 */
export const addItem = (
  addItemBody: AddItemBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.post(`/tierlist/item`, addItemBody, options);
};

export const getAddItemMutationOptions = <
  TError = AxiosError<AddItem409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addItem>>,
    TError,
    { data: AddItemBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addItem>>,
  TError,
  { data: AddItemBody },
  TContext
> => {
  const mutationKey = ['addItem'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addItem>>,
    { data: AddItemBody }
  > = (props) => {
    const { data } = props ?? {};

    return addItem(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof addItem>>
>;
export type AddItemMutationBody = AddItemBody;
export type AddItemMutationError = AxiosError<AddItem409>;

/**
 * @summary Adds a new item
 */
export const useAddItem = <TError = AxiosError<AddItem409>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addItem>>,
      TError,
      { data: AddItemBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof addItem>>,
  TError,
  { data: AddItemBody },
  TContext
> => {
  const mutationOptions = getAddItemMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Updates an item
 */
export const updateItem = (
  name: string,
  updateItemBody: UpdateItemBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.patch(`/tierlist/item/${name}`, updateItemBody, options);
};

export const getUpdateItemMutationOptions = <
  TError = AxiosError<UpdateItem409>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateItem>>,
    TError,
    { name: string; data: UpdateItemBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateItem>>,
  TError,
  { name: string; data: UpdateItemBody },
  TContext
> => {
  const mutationKey = ['updateItem'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateItem>>,
    { name: string; data: UpdateItemBody }
  > = (props) => {
    const { name, data } = props ?? {};

    return updateItem(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateItem>>
>;
export type UpdateItemMutationBody = UpdateItemBody;
export type UpdateItemMutationError = AxiosError<UpdateItem409>;

/**
 * @summary Updates an item
 */
export const useUpdateItem = <
  TError = AxiosError<UpdateItem409>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateItem>>,
      TError,
      { name: string; data: UpdateItemBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateItem>>,
  TError,
  { name: string; data: UpdateItemBody },
  TContext
> => {
  const mutationOptions = getUpdateItemMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Deletes an item
 */
export const deleteItem = (
  name: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/tierlist/item/${name}`, options);
};

export const getDeleteItemMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteItem>>,
    TError,
    { name: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteItem>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationKey = ['deleteItem'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteItem>>,
    { name: string }
  > = (props) => {
    const { name } = props ?? {};

    return deleteItem(name, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteItem>>
>;

export type DeleteItemMutationError = AxiosError<unknown>;

/**
 * @summary Deletes an item
 */
export const useDeleteItem = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteItem>>,
      TError,
      { name: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteItem>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationOptions = getDeleteItemMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
